{
  "active": false,
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Script Writer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Set Global Variables1": {
      "main": [
        [
          {
            "node": "Script Writer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "text to image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bridge Code1": {
      "main": [
        [
          {
            "node": "Format JSON2VIDEO Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Bridge Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "VOICES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Script Writer": {
      "main": [
        [
          {
            "node": "Update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Script Writer",
            "type": "ai_languageModel",
            "index": 1
          },
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 1
          },
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "text to image": {
      "main": [
        [
          {
            "node": "Wait5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format JSON2VIDEO Structure": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk2": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Parse and prepare data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse and prepare data": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Images Flux Free": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        []
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        []
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Runware AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Runware AI": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Runware AI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Runware AI1": {
      "main": [
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait4": {
      "main": [
        []
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait5": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VOICES": {
      "main": [
        [
          {
            "node": "Set Global Variables1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-28T14:13:07.900Z",
  "id": "pnBS5VB0wx1uMwwB",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "J2VC.PY - polinations - FLUX",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a social media marketing specialist creating a YouTube video.\nYour task is to generate a series of detailed scenes based on provided input variables, optimized for engagement.\n\n---\n\n### Input Variables:\n\n- **SCRIPT_CONTENT**: The full video script to break down into individual scenes. \n- **VIDEO_TOPIC**: The main subject or title of the video.\n- **SCRIPT_NARRATION_TONE**: A detailed description of the desired tone/style for the script's voice-over and overall feel.\n\n",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are a technical video scene parser.  \nYour one and only function is to take a pre-written script and convert it into the required JSON configuration for the AI video maker.  \nYou do NOT have creative license to alter the script.\n\n---\n\n### CRITICAL DIRECTIVES\n\n1. **USE THE SCRIPT VERBATIM**  \n   The provided `SCRIPT_CONTENT` is the final, approved narration.  \n   You MUST use the sentences from it exactly as they are written for the `text` field.\n\n2. **NO NEW CONTENT**  \n   DO NOT invent, add, paraphrase, expand, shorten, or rewrite any narrative content.  \n   Your job is to segment the existing text, not create new text.\n\n3. **JSON ONLY**  \n   You MUST return ONLY a valid JSON object.  \n   Do not include explanations, apologies, or any text before or after the JSON structure.\n\n4. **NO QUESTIONS**  \n   Make reasonable assumptions silently.  \n   Never ask for clarification.\n\n---\n\n### INPUT VARIABLES\n\n- **SCRIPT_CONTENT**: {{ $('Script Writer').item.json.output }}\n- **VIDEO_TOPIC**: {{ $('Set Global Variables1').item.json.TITLE }}\n- **SCRIPT_NARRATION_TONE**: {{ $('Set Global Variables1').item.json.Script_Tone }}\n\n---\n\n### SCENE GENERATION PLAN\n\n- Process the `SCRIPT_CONTENT` sequentially.  \n- Generate one scene for each sentence or short pair of sentences.  \n- The `text` for each scene = exactly that sentence or sentences from the script.  \n- The `imagePrompt` must describe the scene visually, reflecting the text exactly, without including any words, text, or letters. **CRITICAL - ENSURE THE IMAGE PROMPTS DO NOT HAVE ANY WRITTEN WORDS FOR THE IMAGE GENERATOR TO CREATE I.E: NO WHITEBOARD WITH WRITTEN TO DO LISTS, NO WORDS ON BANNERS OR SIGNS. The image genertor is NOT good with correctly reproducing images that contain words.**\n- The `searchTerms` should be the same as the `imagePrompt`.\n- End each `imagePrompt` with: `ultra-realistic, 8K, cinematic, portrait 9:16`.  \n- Do NOT rewrite, summarize, or modify any text to fit a word count.  \n\n---\n\n### OUTPUT FORMAT\n\nYou must ONLY respond with valid JSON in this exact format:\n\n{\n  \"scenes\": [\n    {\n      \"text\": \"\",\n      \"imagePrompt\": \"\",\n      \"searchTerms\": \"\"\n    }\n  ],\n  \"config\": {\n    \"music\": \"MUSIC_MOOD\",\n    \"voice\": \"VOICE_NAME\",\n    \"orientation\": \"portrait\"\n  }\n}\n\n## AVAILABLE VOICES:\nam_adam, am_liam, bm_george\n\n## AVAILABLE MUSIC MOODS (MUST USE EXACT VALUES):\nsad, melancholic, happy, euphoric/high, excited, chill, uneasy, angry, dark, hopeful, contemplative, funny/quirky\n\n## IMPORTANT:\n- Respond ONLY with the JSON. No explanations or extra text.\n- Ensure the JSON is valid and properly formatted.\n- Do NOT wrap the JSON in any other object or tool call.\n- The `searchTerms` field is required and should match the `imagePrompt`."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -4816,
        16
      ],
      "id": "cdf144ac-d08f-4380-aeee-7c7a76002939",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -5104,
        352
      ],
      "id": "3797cac6-1d06-419e-bf1c-0833d913f308",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "Z0qdSGsCKeFZM9R5",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"scenes\": [\n    {\n      \"text\": \"Narration text for the scene (15-25 words).\",\n      \"imagePrompt\": \"A detailed, cinematic image prompt for FLUX. Describe the scene, lighting, and mood. End with 'ultra-realistic, 8K, cinematic, portrait 9:16'.\"\n    }\n  ],\n  \"config\": {\n    \"music\": \"MUSIC_MOOD\",\n    \"voice\": \"VOICE_NAME\",\n    \"orientation\": \"portrait\"\n  }\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -4624,
        320
      ],
      "id": "eb5c9e5c-7a82-416b-87be-3729ffcde913",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b674fe0d-b8c0-4141-98f4-dad8f0d8aa0d",
              "name": "Script_Tone",
              "value": "UNFILTERED LIFE COACH - HARSH AND IN YOUR FACE",
              "type": "string"
            },
            {
              "id": "b3099542-7b43-403b-ad7c-f4182d803d90",
              "name": "Target_Word_Count",
              "value": "75",
              "type": "string"
            },
            {
              "id": "26f642b6-eaf1-447b-89df-9265e3193b67",
              "name": "TITLE",
              "value": "={{ $('Get row(s) in sheet').item.json.TITLE }}",
              "type": "string"
            },
            {
              "id": "33965433-feff-4245-9d14-18f45ad31364",
              "name": "ELEVENLABS_VOICE_ID",
              "value": "={{ $json['Deacon Deane - New American'] }}",
              "type": "string"
            },
            {
              "id": "d6450946-94cb-48ad-aec3-245e87bbcd7e",
              "name": "BACKGROUND_AUDIO_URL",
              "value": "https://drive.google.com/uc?export=download&id=1UHncH48A0XCLxiODfts___VD963tM4zq",
              "type": "string"
            },
            {
              "id": "eb84c391-9308-47c6-a08e-f8478d4b30a5",
              "name": "Runware Model",
              "value": "civitai:788550@881836",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5600,
        16
      ],
      "id": "12365459-8a14-4fa3-a27b-f6c8f4965fc7",
      "name": "Set Global Variables1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.together.xyz/v1/images/generations",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"black-forest-labs/FLUX.1-schnell-Free\",\n  \"prompt\": \"{{ $json.imagePrompt }}\",\n  \"width\": 720,\n  \"height\": 1280,\n  \"steps\": 4,\n  \"seed\": 1,\n  \"response_format\": \"url\",\n  \"output_format\": \"jpeg\"\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 5
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3968,
        704
      ],
      "id": "5e522be8-a62b-491a-a711-4b69fd84ca6a",
      "name": "Generate Images Flux Free",
      "credentials": {
        "httpHeaderAuth": {
          "id": "JdfDCxKTwaEVNBKO",
          "name": "TOGETHER_API"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.data[0].url }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3568,
        704
      ],
      "id": "d3b808fb-5d52-40e2-ae73-188e68ade573",
      "name": "Download Image"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4048,
        96
      ],
      "id": "feb366e6-3e1f-4c2c-abbd-1a1da44df934",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// This is the most fundamental way to get data in n8n.\n// It retrieves the array of all incoming items, and we select the first one.\nconst firstItem = $input.all()[0];\n\n// Now we can safely get the JSON data from that item.\nconst agentData = firstItem.json;\n\n// This variable will hold our final array of scenes.\nlet scenesArray = [];\n\n// The rest of this logic is correct and will now work.\nif (agentData.output && agentData.output.scenes) {\n  scenesArray = agentData.output.scenes;\n} else if (agentData.scenes) {\n  scenesArray = agentData.scenes;\n}\n\n// If we successfully found a scenes array, return it.\nif (scenesArray && scenesArray.length > 0) {\n  return scenesArray;\n} else {\n  // If no scenes were found, stop with a clear error.\n  throw new Error(\"Could not find a 'scenes' array in the input data. Check the AI Agent output.\");\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4336,
        16
      ],
      "id": "9a8c86e8-f4a0-452a-90f2-e2adf895f533",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// This code assumes it's receiving binary image data from the Download Image node\n\nconst items = $input.all();\nconst output = [];\n\nitems.forEach((item, index) => {\n  const timestamp = Date.now();\n  const filename = `temp_scene_${index}_${timestamp}.jpg`;\n  const filepath = `/short_video_maker/images/${filename}`;\n\n  output.push({\n    json: {\n      ...item.json,\n      sceneIndex: index,\n      imageFilename: filename,\n      imagePath: filepath\n    },\n    binary: item.binary  // Ensure binary data is passed through for writing\n  });\n});\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3264,
        -16
      ],
      "id": "211641b6-8215-4c15-83e9-5396478c8846",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// Bridge Code1 - Simplified Version\n// This node processes items coming from \"Read/Write Files from Disk\"\nconst allItems = $input.all();\n\n// Validation\nif (!allItems || allItems.length === 0) {\n  throw new Error(\"No items received from Read/Write Files node\");\n}\n\n// Get the original AI Agent output scenes\nconst originalAgentData = $('AI Agent').first().json.output;\n\n// Validation for AI Agent data\nif (!originalAgentData || !originalAgentData.scenes) {\n  throw new Error(\"Could not find scenes data from AI Agent node\");\n}\n\nconsole.log(`Processing ${allItems.length} items from file write operations`);\n\n// Process each item that was written to disk\nconst outputItems = allItems.map((item, index) => {\n  // Get the corresponding scene data from AI Agent\n  const sceneData = originalAgentData.scenes[index];\n  \n  if (!sceneData) {\n    throw new Error(`No scene data found for index ${index}`);\n  }\n\n  // Create output item with all necessary data (videoConfig removed)\n  return {\n    json: {\n      text: sceneData.text,\n      imagePrompt: sceneData.imagePrompt,\n      sceneIndex: index,\n      imagePath: item.json.imagePath,\n      imageFilename: item.json.imageFilename,\n    },\n    // Pass through binary data if it exists\n    ...(item.binary ? { binary: item.binary } : {})\n  };\n});\n\nconsole.log(`Bridge Code1 processed ${outputItems.length} items successfully`);\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2384,
        -16
      ],
      "id": "f3523b38-900e-4aeb-973a-2e7cf72ddfe5",
      "name": "Bridge Code1"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.imagePath }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -2752,
        -16
      ],
      "id": "aa35b8bb-56f7-4c7e-8621-66de1e1fc39d",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1jlAIziQl3cFqugXsuMqduVc-6ArFwfHmyPjcAjjV2Gs",
          "mode": "list",
          "cachedResultName": "IUP - VIDEO IDEAS -N8N",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jlAIziQl3cFqugXsuMqduVc-6ArFwfHmyPjcAjjV2Gs/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jlAIziQl3cFqugXsuMqduVc-6ArFwfHmyPjcAjjV2Gs/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Status",
              "lookupValue": "NEW"
            }
          ]
        },
        "options": {
          "returnFirstMatch": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -6176,
        16
      ],
      "id": "706d6e0e-2910-4f52-9222-a0214ddd9a60",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "G5F0HGiAwsbqZpbE",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=PRIMARY DIRECTIVE\n\nYOUR ONLY OUTPUT MUST BE THE RAW, SPOKEN-WORD SCRIPT, WRITTEN IN FLAWLESS, STANDARD AMERICAN ENGLISH. PRODUCE NO HEADINGS, LABELS, TITLES, DIRECTOR'S NOTES, MARKDOWN, BOLDING, OR ITALICS OF ANY KIND. THE OUTPUT MUST BE PURE TEXT AND CONTAIN NO FOREIGN CHARACTERS.\n\nYOU ARE AN AI MASTERMIND, specialized in creating high-impact, viral story scripts for social media.\nYour task is to generate a full, complete script based on the provided variables, adhering exactly to the specified word count.\n\nThe script must provide complete, actionable advice or a fully developed story. Do not give instructions or suggestions without explaining how to do them, and do not leave ideas unfinished. Every recommendation, tip, or concept must be fully explained and understandable to the viewer.\n\nInput Variables:\n\nTITLE: The main topic to base the story script on.\n\nScript_Tone: A detailed description of the desired tone and persona for the narration.\n\nTarget_Word_Count: The exact word count the final script must achieve.\n\nScript Generation Requirements:\n\nThe HARD LIMIT: Word Count\nThe ABSOLUTE MOST IMPORTANT RULE is the word count. The final script MUST BE EXACTLY {{ $json.Target_Word_Count }} words. This is a non-negotiable limit. Do not go over or under this number. If the story feels too short, you must creatively expand it. If it is too long, you must concisely rewrite it until it meets the target precisely.\n\nTopic Focus\nGenerate a VIRAL story script based on the title: {{ $json.TITLE }}\n\nNarrative Structure\nThe script's content must seamlessly integrate the following four elements in order, without ever labeling them:\n\n*A Scroll-Stopping Hook\nThe first 1–3 sentences must be instantly gripping, highly emotional, and curiosity-driven. Build them by combining or adapting at least one of the following hook formulas (listed below) with the {{ $json.TITLE }} topic. Rewrite the chosen pattern into fresh, natural spoken English so it feels original, not copy-pasted. Stay in the “{{ $json.Script_Tone }}” voice — direct, harsh but empowering.\n - “Stop lying to yourself about [TITLE] — here’s the brutal truth.”\n - “You’re sabotaging your own [TITLE] and you do not even see it.”\n - “Nobody’s coming to save you. Fix your [TITLE] now.”\n - “If you think [common belief about TITLE], you’re dead wrong.”\n - “Here’s the harsh reality about [TITLE] nobody wants to tell you.”\n - “You’re wasting time you do not even have on [TITLE].”\n - “The real reason you keep failing at [TITLE] — and how to end it.”\n - “Your excuses about [TITLE] are killing your potential.”\n - “This one shift will flip your entire [TITLE] upside down.”\n - “Wake up. You’re asleep at the wheel of your own [TITLE].”\n - “Stop waiting for motivation. Start doing this with [TITLE] today.”\n - “The truth about [TITLE] will punch you in the gut.”\n - “You think you’re doing [TITLE] right. You’re not.”\n - “Your comfort zone is strangling your [TITLE].”\n - “If you want [TITLE] results, you have to earn them.”\n - “Nobody told you the cost of ignoring [TITLE].”\n - “You’re one decision away from changing your [TITLE] forever.”\n - “The brutal difference between people who win at [TITLE] and you.”\n - “You do not need permission to crush [TITLE]. Start now.”\n - “Stop scrolling and listen. This will change your [TITLE].”\n\n*An Escalating Flow: The middle of the script must build suspense or intrigue. Maintain a punchy, in-your-face, informational flow with tight sentences to keep the viewer engaged.\n\n*A Compelling CTA\nA Compelling CTA  \nEnd the script with a powerful, concrete action. Build it by adapting at least one of the following CTA formulas with {{ $json.TITLE }}. End the script with one to three short, imperative sentences (no more than 10 words each). Make them sound like direct commands, not motivational slogans.\n\n - “Stop scrolling, get up, and do [TITLE] right now.”\n - “No more excuses. Start applying [TITLE] today.”\n - “Prove yourself wrong. Take the first step toward [TITLE] now.”\n - “Own your [TITLE]. Take control before another day slips by.”\n - “You’ve wasted enough time. Start building your [TITLE] today.”\n - “Decide. Commit. Execute. Make [TITLE] real in your life now.”\n - “Quit dreaming about [TITLE]. Start doing it before you blink.”\n - “Your future self is screaming for you to act on [TITLE].”\n - “Change does not happen tomorrow. It starts with [TITLE] today.”\n - “Turn this wake-up call into action. Begin [TITLE] now.”\n - “Get uncomfortable. Push yourself. Make [TITLE] your new normal.”\n - “Stop wishing. Start working. [TITLE] begins this moment.”\n - “The only thing between you and [TITLE] is action. Take it.”\n - “Make a promise to yourself and keep it. Start [TITLE] now.”\n - “Do the hard thing. Prove everyone wrong with your [TITLE].”\n\nTone and Style\nThe entire script must be written in the style of a(n) {{ $json.Script_Tone }}.\nUse simple, casual, spoken-style English.\nTTS Optimization: The script must be optimized for Text-to-Speech. Avoid all abbreviations and acronyms. For example, always write \"World War Two\" instead of \"WWII\".\n\nFinal Review Protocol:\n\nBefore providing the output, perform a final word count check to confirm the script is EXACTLY {{ $json.Target_Word_Count }} words. This is a mandatory final step.\n\nFinal Output:\n\nThe final output is ONLY the text of the script, meeting the exact word count. Nothing else",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -5312,
        16
      ],
      "id": "ceb0297e-c90b-4930-98ce-6e6bd6052e39",
      "name": "Script Writer"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-3.3-70b-instruct:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -4928,
        352
      ],
      "id": "c2c1739d-4062-4b7e-9f74-7c52b337c68c",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "Z0qdSGsCKeFZM9R5",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://image.pollinations.ai/prompt/{{ $json.imagePrompt }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "width",
              "value": "768"
            },
            {
              "name": "height",
              "value": "1280"
            },
            {
              "name": "nologo",
              "value": "true"
            },
            {
              "name": "private",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3568,
        304
      ],
      "id": "d83db18b-19f3-43eb-84d8-43b56ad9cfbe",
      "name": "text to image"
    },
    {
      "parameters": {
        "jsCode": "// N8N Node: \"Format JSON2VIDEO Structure\"\nconst allItems = $input.all();\n\nif (!allItems || allItems.length === 0) {\n  throw new Error(\"No items received from Bridge Code1\");\n}\n\n// Get global variables from n8n (set these in your \"Set Global Variables\" node)\nconst globalVars = $('Set Global Variables1').item.json;\nconst voiceId = globalVars.ELEVENLABS_VOICE_ID || \"2ajXGJNYBR0iNHpS4VZb\"; // Default voice\nconst backgroundAudioUrl = globalVars.BACKGROUND_AUDIO_URL || \"\"; // Optional background music URL\n\n// --- NEW ---\n// Get the video title from the global variables node\nconst videoTitle = globalVars.TITLE || \"Untitled_Video\";\n// --- END NEW ---\n\nconsole.log(`Formatting ${allItems.length} scenes for JSON2VIDEO clone`);\n\n// Build scenes array in JSON2VIDEO format\nconst scenes = [];\n\nfor (const [index, item] of allItems.entries()) {\n  if (!item.json.imagePath) {\n    console.warn(`Skipping scene ${index} - no image path`);\n    continue;\n  }\n  scenes.push({\n    imageData: item.json.imagePath,\n    text: item.json.text,\n    voiceOverText: item.json.text,\n    imagePrompt: item.json.imagePrompt,\n    overlaidText: item.json.text.substring(0, 50) + \"...\", // Shortened for overlay\n    sceneIndex: index\n  });\n}\n\n// Create JSON2VIDEO-compatible structure\nconst json2videoConfig = {\n  // --- NEW ---\n  // Add the title to the JSON object so the Python script can access it\n  title: videoTitle,\n  // --- END NEW ---\n  id: \"n8n_generated\",\n  comment: \"Video created by n8n JSON2VIDEO clone\",\n  height: 1920,\n  width: 1080,\n  quality: \"medium\",\n  draft: false,\n  resolution: \"instagram-story\",\n  fps: 25,\n  cache: true,\n  \n  scenes: scenes,\n  \n  variables: {\n    voice: voiceId,\n    background_audio_url: backgroundAudioUrl,\n    scenes: scenes.map(scene => ({\n      overlaidText: scene.overlaidText,\n      voiceOverText: scene.voiceOverText,\n      imagePrompt: scene.imagePrompt\n    }))\n  },\n  \n  elements: [\n    ...(backgroundAudioUrl ? [{\n      id: \"background-music\",\n      type: \"audio\",\n      src: backgroundAudioUrl,\n      duration: -2,\n      \"fade-out\": 2,\n      volume: 0.2\n    }] : []),\n    \n    {\n      id: \"subtitles\",\n      type: \"subtitles\",\n      settings: {\n        \"font-family\": \"Oswald Bold\",\n        \"font-size\": 140,\n        \"outline-color\": \"#000000\",\n        \"outline-width\": 8,\n        \"position\": \"mid-bottom-center\"\n      },\n      language: \"auto\",\n      comment: \"Auto-generated subtitles\"\n    }\n  ]\n};\n\nconsole.log(`JSON2VIDEO structure created with ${scenes.length} scenes`);\nconsole.log(`Title: ${videoTitle}`); // Log the title for debugging\nconsole.log(`Voice ID: ${voiceId}`);\nconsole.log(`Background Audio: ${backgroundAudioUrl || 'None'}`);\n\n// Return the formatted structure\nreturn [{\n  json: json2videoConfig\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2064,
        -16
      ],
      "id": "506594b8-035c-4490-b289-130703db2650",
      "name": "Format JSON2VIDEO Structure"
    },
    {
      "parameters": {
        "content": "# Voices\n## ROB - Gritty British Guy:\n### 2ajXGJNYBR0iNHpS4VZb\n## Deacon Deane - New American:\n### ZRhQAAUuJfgKYOWgHWbg\n## Declan Sage - Deep American:\n### kqVT88a5QfII1HNAEPTJ\n## James - Husky and Engaging:\n### EkK5I93UQWFDigLMpZcX\n## Vincent C. Michaels - Dramatic Storyteller:\n### n1PvBOwxb8X6m7tahp2h\n## Nathaniel C - Original Suspenseful British Guy:\n### AeRdCCKzvd23BpJoofzx\n",
        "height": 512,
        "width": 592
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -6256,
        -624
      ],
      "id": "efcc2ea2-11ae-4c08-beb9-26ce72f20e0a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "command": "cd /short_video_maker && python3 json2video_clone.py input.json"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1328,
        -16
      ],
      "id": "5430469c-0955-4714-b17f-fd21227f52ce",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/short_video_maker/input.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1600,
        -32
      ],
      "id": "97754dc1-af2d-4aad-8117-63a229a25845",
      "name": "Read/Write Files from Disk2"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1824,
        -32
      ],
      "id": "5138d9cf-413a-462b-9201-2fe999bd896c",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "// Get the output from the previous Execute Command node\nconst executeNodeOutput = items[0].json;\nconst stdout = executeNodeOutput.stdout;\n\n// Find the starting position of the JSON object\n// We use lastIndexOf('{') because the JSON is the last thing printed\nconst jsonStartIndex = stdout.lastIndexOf('{');\n\n// Check if a JSON object was found\nif (jsonStartIndex === -1) {\n  throw new Error(\"Could not find a JSON object in the stdout from the previous node.\");\n}\n\n// Extract the JSON string from the full stdout\nconst jsonString = stdout.substring(jsonStartIndex);\n\ntry {\n  // Parse the extracted string into a usable JavaScript object\n  const cleanData = JSON.parse(jsonString);\n  \n  // Return the clean data for the next node (e.g., Google Sheets)\n  return [{\n    json: cleanData\n  }];\n} catch (error) {\n  console.error(\"Failed to parse JSON string:\", jsonString);\n  throw new Error(\"The extracted string could not be parsed as JSON. Check the execute node's output.\");\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1088,
        -16
      ],
      "id": "dd1fa1ff-db54-4f9d-b469-25a0037d2025",
      "name": "Parse and prepare data"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1jlAIziQl3cFqugXsuMqduVc-6ArFwfHmyPjcAjjV2Gs",
          "mode": "list",
          "cachedResultName": "IUP - VIDEO IDEAS -N8N",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jlAIziQl3cFqugXsuMqduVc-6ArFwfHmyPjcAjjV2Gs/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jlAIziQl3cFqugXsuMqduVc-6ArFwfHmyPjcAjjV2Gs/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "TITLE": "={{ $('Get row(s) in sheet').first().json.TITLE }}",
            "Status": "DONE",
            "VIDEO_PATH": "={{ $json.video_path }}",
            "DATE": "={{ $json.created_at }}",
            "POSTING STATUS": "READY",
            "ERRORS?": "={{ $json.error }}"
          },
          "matchingColumns": [
            "TITLE"
          ],
          "schema": [
            {
              "id": "TITLE",
              "displayName": "TITLE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SCRIPT",
              "displayName": "SCRIPT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "VIDEO_PATH",
              "displayName": "VIDEO_PATH",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "DATE",
              "displayName": "DATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "POSTING STATUS",
              "displayName": "POSTING STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "YOUTUBE",
              "displayName": "YOUTUBE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "TIKTOK",
              "displayName": "TIKTOK",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "INSTAGRAM",
              "displayName": "INSTAGRAM",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACEBOOK",
              "displayName": "FACEBOOK",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ERRORS?",
              "displayName": "ERRORS?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -880,
        -16
      ],
      "id": "8ce77522-7751-4dad-8b1a-208b5e5877d4",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "G5F0HGiAwsbqZpbE",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -3376,
        704
      ],
      "id": "e966197b-b025-46a2-a778-34fee1d16c6d",
      "name": "Wait1",
      "webhookId": "be91d9d3-b4b1-49fe-8ffe-70d900b3c596"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.wavespeed.ai/api/v3/wavespeed-ai/flux-schnell",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\t\"prompt\": \"{{ $json.imagePrompt }}\",\n\t\"strength\": 0.8,\n\t\"size\": \"720*1280\",\n\t\"num_images\": 1,\n\t\"seed\": -1,\n\t\"output_format\": \"jpeg\",\n\t\"enable_base64_output\": true,\n\t\"enable_sync_mode\": false\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3968,
        1088
      ],
      "id": "0d5fa078-b6c9-42d1-8e71-148987479599",
      "name": "HTTP Request",
      "credentials": {
        "httpBearerAuth": {
          "id": "Eb409FBmxO3djyPB",
          "name": "WaveSpeed AI"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.data.urls.get }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3536,
        1088
      ],
      "id": "ca19c8e4-c9fd-48e6-b87e-bb4e6a304a85",
      "name": "HTTP Request1",
      "credentials": {
        "httpBearerAuth": {
          "id": "Eb409FBmxO3djyPB",
          "name": "WaveSpeed AI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  \n  try {\n    // Check different possible paths for the base64 data\n    let base64String = null;\n    \n    // Try different possible locations for the base64 data\n    if (item.json.data && item.json.data.outputs && item.json.data.outputs[0]) {\n      base64String = item.json.data.outputs[0];\n    } else if (item.json.outputs && item.json.outputs[0]) {\n      base64String = item.json.outputs[0];\n    } else if (item.json.data && item.json.data.output) {\n      base64String = item.json.data.output;\n    } else if (item.json.image) {\n      base64String = item.json.image;\n    } else if (item.json.data && item.json.data.image) {\n      base64String = item.json.data.image;\n    }\n    \n    // Log the structure to debug\n    console.log('Item JSON structure:', JSON.stringify(item.json, null, 2));\n    \n    if (!base64String) {\n      throw new Error(`Base64 string not found. Available keys: ${Object.keys(item.json)}`);\n    }\n    \n    // Remove data URL prefix if present (e.g., \"data:image/jpeg;base64,\")\n    const cleanBase64 = base64String.replace(/^data:image\\/[a-z]+;base64,/, '');\n    \n    // Convert Base64 to binary\n    const binaryData = Buffer.from(cleanBase64, 'base64');\n    \n    // Create binary data object\n    const binaryDataObj = await this.helpers.prepareBinaryData(\n      binaryData, \n      `generated_image_${Date.now()}.jpg`, \n      'image/jpeg'\n    );\n    \n    // Set the binary data\n    item.binary = {\n      data: binaryDataObj\n    };\n    \n    // Clean up the JSON to save memory\n    if (item.json.data && item.json.data.outputs) {\n      delete item.json.data.outputs;\n    }\n    \n  } catch (error) {\n    console.error('Error processing item:', error);\n    item.json.error = error.message;\n  }\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3296,
        1088
      ],
      "id": "a14895d5-eb01-478e-812a-20f66ec48217",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -3728,
        1088
      ],
      "id": "d1cb9078-aae4-4dc4-8191-0ebd997f8221",
      "name": "Wait2",
      "webhookId": "9f88c6f4-fcc5-4507-8d8c-41fb0117a5cc"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -3776,
        704
      ],
      "id": "8a177be9-0904-43a8-82d2-712fca9786fd",
      "name": "Wait3",
      "webhookId": "025c4cba-c9f7-4244-8dc5-1cb79c79d9d5"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1jlAIziQl3cFqugXsuMqduVc-6ArFwfHmyPjcAjjV2Gs",
          "mode": "list",
          "cachedResultName": "IUP - VIDEO IDEAS -N8N",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jlAIziQl3cFqugXsuMqduVc-6ArFwfHmyPjcAjjV2Gs/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jlAIziQl3cFqugXsuMqduVc-6ArFwfHmyPjcAjjV2Gs/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "TITLE": "={{ $('Get row(s) in sheet').first().json.TITLE }}",
            "SCRIPT": "={{ $json.output }}"
          },
          "matchingColumns": [
            "TITLE"
          ],
          "schema": [
            {
              "id": "TITLE",
              "displayName": "TITLE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "SCRIPT",
              "displayName": "SCRIPT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "VIDEO_PATH",
              "displayName": "VIDEO_PATH",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "DATE",
              "displayName": "DATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "POSTING STATUS",
              "displayName": "POSTING STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "YOUTUBE",
              "displayName": "YOUTUBE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "TIKTOK",
              "displayName": "TIKTOK",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "INSTAGRAM",
              "displayName": "INSTAGRAM",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "FACEBOOK",
              "displayName": "FACEBOOK",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "THREADS",
              "displayName": "THREADS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ERRORS?",
              "displayName": "ERRORS?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4976,
        16
      ],
      "id": "bc24e03d-87f8-4128-bbff-c55e21d579ab",
      "name": "Update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "G5F0HGiAwsbqZpbE",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## TOGETHER.AI   FREE BUT  RATE LIMITS BAD. LIKE 0.6 IMAGES PER MINUTE",
        "height": 304,
        "width": 896
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4032,
        608
      ],
      "id": "2e2ee6be-c8b5-4d3a-9412-86cf5e6e3e42",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## POLINATIONS.AI. FREE  FAST. better now and i removed the logo",
        "height": 288,
        "width": 448
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3600,
        176
      ],
      "id": "19c8d363-a52e-4b59-a97d-a888df95b377",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## WAVESPEED.AI  .003 per image. used with my API Key",
        "height": 208,
        "width": 912
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4016,
        1024
      ],
      "id": "f19252fd-2581-4e20-b9ec-2aa024995e4f",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.runware.ai/v1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "=[\n  {\n    \"taskType\": \"imageInference\",\n    \"taskUUID\": \"{{ $json.taskUUID }}\",\n    \"outputType\": \"URL\",\n    \"outputFormat\": \"jpg\",\n    \"positivePrompt\": \"{{ $('Loop Over Items').item.json.imagePrompt }}\",\n    \"height\": 1280,\n    \"width\": 768,\n    \"model\": \"{{ $('Set Global Variables1').item.json['Runware Model'] }}\",\n    \"steps\": 6,\n    \"CFGScale\": 7,\n    \"numberResults\": 1\n  }\n]\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2704,
        1072
      ],
      "id": "fcc47f33-ea51-477c-bbc8-f635674bd654",
      "name": "Runware AI",
      "credentials": {
        "httpBearerAuth": {
          "id": "ZmymRg9YW2V2PZgq",
          "name": "RUNWARE.AI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This function creates a unique identifier that looks like a UUID\n// without using any external modules. It's random enough for API tracking.\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nconst randomTaskUUID = generateUUID();\n\nreturn {\n  taskUUID: randomTaskUUID\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2976,
        1072
      ],
      "id": "99701d49-d678-4ebd-8df2-eee6dd4962cd",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2496,
        1072
      ],
      "id": "e608d311-9e4b-4c38-b564-51304d957f20",
      "name": "Wait",
      "webhookId": "01dfb5c2-7fd1-46e7-b5c7-6e52c7a0d9d1"
    },
    {
      "parameters": {
        "url": "={{ $json.data[0].imageURL }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2288,
        1072
      ],
      "id": "ebfbb2b6-1281-4440-9681-f6da539ea107",
      "name": "Runware AI1",
      "credentials": {
        "httpBearerAuth": {
          "id": "ZmymRg9YW2V2PZgq",
          "name": "RUNWARE.AI"
        }
      }
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2080,
        1072
      ],
      "id": "5fe70edc-36fa-467d-b3ef-d62363ad605c",
      "name": "Wait4",
      "webhookId": "2866030b-1cd5-4a7c-9f5a-76517f852d5f"
    },
    {
      "parameters": {
        "content": "## RUNWARE.AI",
        "height": 304,
        "width": 1104,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3024,
        1008
      ],
      "id": "bd31171e-bcb2-404e-831e-6d0ee727699f",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * 1-5"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -6432,
        16
      ],
      "id": "e22645c4-d4e5-42b2-a895-157c54768512",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "content": "# Runware Models\n## Real Flux-S Civitai - 20 steps= $.0038/ 4-6 steps= $.0013:\n## civitai:788550@881836\n\n## FLUX-S Base - 20 steps= $.0038/ 4-6 steps= $.0013:\n## runware:100@1",
        "height": 512,
        "width": 592,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5488,
        -624
      ],
      "id": "2c7fe016-9fdd-44fb-bc1e-94dfac340499",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -3344,
        304
      ],
      "id": "c34fe02d-3558-4bac-a1d2-054cf3491314",
      "name": "Wait5",
      "webhookId": "fc847c0d-2603-4348-bb6d-361b4ceee634"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -6496,
        272
      ],
      "id": "f55e42d0-21b1-4e04-93f6-a9c35852b73c",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=### PRIMARY DIRECTIVE\n\nYOUR ONLY OUTPUT MUST BE THE RAW, SPOKEN-WORD SCRIPT, WRITTEN IN FLAWLESS, STANDARD AMERICAN ENGLISH. PRODUCE NO HEADINGS, LABELS, TITLES, DIRECTOR'S NOTES, MARKDOWN, BOLDING, OR ITALICS OF ANY KIND. THE OUTPUT MUST BE PURE TEXT AND CONTAIN NO FOREIGN CHARACTERS.\n\n---\n\nYOU ARE AN AI MASTERMIND, specialized in creating high-impact, viral story scripts for social media.\nYour task is to generate a full, complete script based on the provided variables, adhering exactly to the specified word count.\n\nThe script must provide complete, actionable advice or a fully developed story. Do not give instructions or suggestions without explaining how to do them, and do not leave ideas unfinished. Every recommendation, tip, or concept must be fully explained and understandable to the viewer.\n\n---\n\n### Input Variables:\n\n* **TITLE**: The main topic to base the story script on.\n* **Script_Tone**: A detailed description of the desired tone and persona for the narration.\n* **Target_Word_Count**: The exact word count the final script must achieve.\n\n---\n\n### Script Generation Requirements:\n\n1.  **The HARD LIMIT: Word Count**: The **ABSOLUTE MOST IMPORTANT RULE** is the word count. The final script **MUST BE EXACTLY {{ $json.Target_Word_Count }} words.** This is a non-negotiable limit. Do not go over or under this number. If the story feels too short, you must creatively expand it. If it is too long, you must concisely rewrite it until it meets the target precisely.\n\n2.  **Topic Focus**: Generate a VIRAL story script based on the title: **{{ $json.TITLE }}**\n\n3.  **Narrative Structure**: The script's content must seamlessly integrate the following four elements in order, without ever labeling them:\n    * **A Scroll-Stopping Hook**: The first 1-2 sentences must be jaw-dropping or intensely curious.\n    * **An Escalating Flow**: The middle of the script must build suspense or intrigue. Maintain a punchy, in-your-face, informational flow with tight sentences to keep the viewer engaged.\n    * **A Shocking Twist**: Near the end, introduce a surprising turn or reveal that changes the story's meaning.\n    * **A Compelling CTA**: End the script with a powerful final line that includes a call to action matching the script's tone.\n\n4.  **Tone and Style**:\n    * The entire script must be written in the style of a(n) **{{ $json.Script_Tone }}**.\n    * Use simple, casual, spoken-style English.\n    * **TTS Optimization:** The script must be optimized for Text-to-Speech. Avoid all abbreviations and acronyms. For example, always write \"World War Two\" instead of \"WWII\".\n\n---\n\n### Final Review Protocol:\n\nBefore providing the output, perform a final word count check to confirm the script is **EXACTLY {{ $json.Target_Word_Count }}** words. This is a mandatory final step.\n\n---\n\n### Final Check:\n\nThe final output is ONLY the text of the script, meeting the exact word count. Nothing else.\n",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -6896,
        -272
      ],
      "id": "9cbf795e-fb04-4b8e-bf3d-56f7f73c3497",
      "name": "Script Writer1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9580e6ae-7bd9-438d-8856-49be1efccd79",
              "name": "Deacon Deane - New American",
              "value": "ZRhQAAUuJfgKYOWgHWbg",
              "type": "string"
            },
            {
              "id": "e7d4c5cc-5a34-4556-ae90-c0d5d154ffb1",
              "name": "ROB - Gritty British Guy",
              "value": "2ajXGJNYBR0iNHpS4VZb",
              "type": "string"
            },
            {
              "id": "b46f94b3-fa2f-49b8-86b0-a517730ce86f",
              "name": "Declan Sage - Deep American",
              "value": "kqVT88a5QfII1HNAEPTJ",
              "type": "string"
            },
            {
              "id": "0ecbcef5-041e-4247-9802-5be48bdb4158",
              "name": "James - Husky and Engaging",
              "value": "EkK5I93UQWFDigLMpZcX",
              "type": "string"
            },
            {
              "id": "d04b5aee-8e3a-4abe-9fc1-b1853d23cc57",
              "name": "Vincent C Michaels - Dramatic Storyteller",
              "value": "n1PvBOwxb8X6m7tahp2h",
              "type": "string"
            },
            {
              "id": "889bced5-e9ac-42ca-8e14-2bf8698520df",
              "name": "Nathaniel C - Original Suspenseful British Guy",
              "value": "AeRdCCKzvd23BpJoofzx",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5856,
        16
      ],
      "id": "e02c6623-bb01-44ea-a04b-2fa43ad1287e",
      "name": "VOICES"
    },
    {
      "parameters": {
        "content": "## SONGS\nTypographic_Stomp_2025-09-28T155002.mp3 https://drive.google.com/uc?export=download&id=1e5jRN5N6i1vVUdaIcJdbQsuLIZL7wN4o\nCursed_Land_REMADE.mp3 https://drive.google.com/uc?export=download&id=1mMh2dU6siv4NuYmS111e8u31wEg0Oz0B\nTribal_Groove_Loop_2025-09-28T154746.mp3 https://drive.google.com/uc?export=download&id=19_J8DMksoI_Q4nft69AZRuVOsDo-Nc35\nTribal_Djembe_shaker.mp3 https://drive.google.com/uc?export=download&id=1qQdzAgQnu-LSTzjjPfzfVMb-sNGFwJJo\nTribal_Djembe_Loop_shaker_some_more_i_guess.mp3 https://drive.google.com/uc?export=download&id=1gzBiFqW8ryUz39ZzaqtCitPvu_j-dJaL\nThe_Temples_Secret_Slow_Build.mp3 https://drive.google.com/uc?export=download&id=1a4FkepP5wSDPSP0-OAf3r8vktEvx_GYf\nShadows_of_the_Lost_Temple_Vocals.mp3 https://drive.google.com/uc?export=download&id=1gdHpNy_WU-xT7i9VxRFUFs9AHteDojU-\nQuest_of_Light_bright_and_airy.mp3 https://drive.google.com/uc?export=download&id=1DVQMrp4-OOdoMYwSiEkRBD39FMq92LLk\nNocturnal_Reverie_Horn_only.mp3 https://drive.google.com/uc?export=download&id=1u3oHp5isHmP26aiqdvu4ezQNZ4VSE6fE\nNocturnal_Reverie_Cello_Background_Perfect.mp3 https://drive.google.com/uc?export=download&id=1sk59-HFs13-y7T2kEaPXGyhKrDTxv2aa\nNocturnal_Reverie_2025-09-28T153103.mp3 https://drive.google.com/uc?export=download&id=1iGUGTRjhPlhWm_NRwd32RmtW6A8THTip\nEpic_Timpani_Crescendo_Horns_and_Timpani_to_a_crescendo.mp3 https://drive.google.com/uc?export=download&id=1lapEb7Oe_iLzx5GSI0kY4uHJ_zh3CZCk\nDrums_of_Suspense_Cinematic_Drums_Fast.mp3 https://drive.google.com/uc?export=download&id=1UHncH48A0XCLxiODfts___VD963tM4zq\nWrathful_Determination_v1_REMADE https://drive.google.com/uc?export=download&id=1INJYeqqRB8kETMB_q-GFSdNNwfg2GfzF\nBleu.mp3 https://drive.google.com/uc?export=download&id=17RyrFe91Ai8pLaT8xXVlTC2rONTdFrtm\nRiver Meditation.mp3 https://drive.google.com/uc?export=download&id=1PWCOTFA3LTS-m5xV3NtvDLntk_ElkzWd\nDawn of the Apocalypse.mp3 https://drive.google.com/uc?export=download&id=17ZX-BVxfRBUzPJsKrFrpCUoig7KESokd\nHidden Truth.mp3 https://drive.google.com/uc?export=download&id=1zUns98tLMTu9nr6nEB1ss7A4VA2U2cTi\nLimit 70.mp3 https://drive.google.com/uc?export=download&id=1DCv-NJPctRcEI3EwRNrP9rvwPe1pNLZA\nMotions.mp3 https://drive.google.com/uc?export=download&id=1zSHazUjRS5PRpktW5Jkd6S8dPHVgVCEI\nNatural Vibes.mp3 https://drive.google.com/uc?export=download&id=176JS09w7FZV-JK4-W2UCiL1Uuq8D37oD",
        "height": 448,
        "width": 1136
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -6848,
        512
      ],
      "id": "542cda6a-5c24-44a0-b256-a3b18e80835c",
      "name": "Sticky Note6"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-28T14:13:07.900Z",
      "updatedAt": "2025-09-28T14:13:07.900Z",
      "role": "workflow:owner",
      "workflowId": "pnBS5VB0wx1uMwwB",
      "projectId": "aYesZFcPjHzYQyLq"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-12T18:09:53.164Z",
      "updatedAt": "2025-09-12T18:09:53.164Z",
      "id": "E5uIgQAu9AEGW2wZ",
      "name": "IUP"
    },
    {
      "createdAt": "2025-08-03T13:57:08.438Z",
      "updatedAt": "2025-08-03T13:57:08.438Z",
      "id": "Mas1jE28bXSMu19L",
      "name": "Fully Functional"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-28T16:41:33.254Z",
  "versionId": "e99b7665-5f23-439a-9180-4b0ca64fbfea"
}