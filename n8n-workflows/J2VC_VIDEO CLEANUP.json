{
  "active": false,
  "connections": {
    "Parse Results": {
      "main": [
        [
          {
            "node": "Has Candidates?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Candidates?": {
      "main": [
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Files Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Message": {
      "main": [
        [
          {
            "node": "Save File List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save File List": {
      "main": [
        [
          {
            "node": "Send Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load File List": {
      "main": [
        [
          {
            "node": "Prepare Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Files": {
      "main": [
        [
          {
            "node": "Delete Files1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Execution": {
      "main": [
        [
          {
            "node": "Send Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Completion": {
      "main": [
        [
          {
            "node": "Cleanup Temp Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config2": {
      "main": [
        [
          {
            "node": "Get Sheet Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sheet Data1": {
      "main": [
        [
          {
            "node": "To JSON1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "To JSON1": {
      "main": [
        [
          {
            "node": "Save Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Data1": {
      "main": [
        [
          {
            "node": "Analyze1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze1": {
      "main": [
        [
          {
            "node": "Parse Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Files1": {
      "main": [
        [
          {
            "node": "Parse Execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-28T12:43:08.567Z",
  "id": "n7HzckT6hWYCiYUY",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "J2VC_VIDEO CLEANUP",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const executeOutput = items[0].json;\nconst stdout = executeOutput.stdout;\nconst jsonStartIndex = stdout.lastIndexOf('{');\nif (jsonStartIndex === -1) {\n  throw new Error('No JSON found in output');\n}\nconst jsonString = stdout.substring(jsonStartIndex);\nconst result = JSON.parse(jsonString);\nreturn [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        704
      ],
      "id": "1f9bf31e-ce54-48ff-b6b8-9082e55cdef9",
      "name": "Parse Results"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.candidates_found }}",
              "operation": "larger"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -304,
        704
      ],
      "id": "3635de45-747c-481d-a0b3-e49929bf00e0",
      "name": "Has Candidates?"
    },
    {
      "parameters": {
        "jsCode": "const data = items[0].json;\nlet message = `VIDEO CLEANUP ANALYSIS\\n\\n`;\nmessage += `Files found: ${data.candidates_found}\\n`;\nmessage += `Space to free: ${data.total_space_mb} MB\\n`;\nmessage += `Age threshold: ${data.threshold_days} days\\n\\n`;\nmessage += `FILES TO DELETE:\\n`;\nmessage += `================\\n\\n`;\n\nif (data.candidates) {\n  data.candidates.forEach((c, i) => {\n    message += `${i+1}. ${c.title}\\n`;\n    message += `   Path: ${c.video_path}\\n`;\n    message += `   Age: ${c.days_old} days\\n`;\n    message += `   Size: ${c.file_info ? c.file_info.size_mb + ' MB' : 'Unknown'}\\n\\n`;\n  });\n}\n\nmessage += `WARNING: This action cannot be undone!\\n`;\nmessage += `To proceed, run the EXECUTE workflow.`;\n\nconst filePaths = data.candidates ? data.candidates.map(c => c.video_path) : [];\n\nreturn [{ json: { \n  message, \n  file_paths: filePaths,\n  candidates_count: data.candidates_found,\n  total_space_mb: data.total_space_mb\n} }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        592
      ],
      "id": "7c5733c7-7965-468a-8246-90ce3657f2ea",
      "name": "Format Message"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "/short_video_maker/cleanup_list.json",
        "dataPropertyName": "file_paths",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        144,
        592
      ],
      "id": "3c3a4c15-246c-4504-bfa1-23a5c79aad63",
      "name": "Save File List"
    },
    {
      "parameters": {
        "text": "={{ $('Format Message').item.json.message }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        368,
        592
      ],
      "id": "9b8c17b0-6c05-419c-9fd3-54e0671fba98",
      "name": "Send Report",
      "webhookId": "9ab2d757-19b3-4339-b2f2-31fc844af246"
    },
    {
      "parameters": {
        "text": "No video files found for cleanup. All videos are either too recent or don't meet cleanup criteria.",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -80,
        800
      ],
      "id": "a01d7468-8cc6-4a09-b4a8-8c8353b71f59",
      "name": "No Files Message",
      "webhookId": "827cd5bc-5bd9-4edf-b07b-19f613548f36"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1616,
        992
      ],
      "id": "0b8a2f24-11b3-48dc-8933-a5db90af771f",
      "name": "Load File List"
    },
    {
      "parameters": {
        "jsCode": "const fileContent = items[0].json.data;\nlet filePaths;\ntry {\n  filePaths = JSON.parse(fileContent);\n} catch (error) {\n  filePaths = fileContent;\n}\nif (!Array.isArray(filePaths)) {\n  throw new Error('Invalid file paths data');\n}\nconst filePathsJson = JSON.stringify(filePaths);\nreturn [{ json: { approved_files: filePathsJson, file_count: filePaths.length } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1408,
        992
      ],
      "id": "4b087200-40fa-4d69-a67b-e75ba6e9c20a",
      "name": "Prepare Files"
    },
    {
      "parameters": {
        "jsCode": "const executeOutput = items[0].json;\nconst stdout = executeOutput.stdout;\nconst jsonStartIndex = stdout.lastIndexOf('{');\nif (jsonStartIndex === -1) {\n  throw new Error('No JSON found in output');\n}\nconst jsonString = stdout.substring(jsonStartIndex);\nconst result = JSON.parse(jsonString);\n\nlet message = `CLEANUP COMPLETED\\n\\n`;\nmessage += `${result.summary}\\n\\n`;\n\nif (result.deleted_files && result.deleted_files.length > 0) {\n  message += `DELETED FILES:\\n`;\n  result.deleted_files.forEach((f, i) => {\n    message += `${i+1}. ${f.path} (${f.size_mb} MB)\\n`;\n  });\n  message += `\\n`;\n}\n\nif (result.failed_deletions && result.failed_deletions.length > 0) {\n  message += `FAILED DELETIONS:\\n`;\n  result.failed_deletions.forEach((f, i) => {\n    message += `${i+1}. ${f.path}: ${f.error}\\n`;\n  });\n}\n\nreturn [{ json: { ...result, summary_message: message } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        992
      ],
      "id": "7a37036e-dbb0-4808-8e1b-59efeb18bacf",
      "name": "Parse Execution"
    },
    {
      "parameters": {
        "text": "={{ $json.summary_message }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -736,
        992
      ],
      "id": "e2956390-70bf-4671-ae51-409d31b21f19",
      "name": "Send Completion",
      "webhookId": "d118963a-e8da-40f9-93c3-144e6f2300da"
    },
    {
      "parameters": {
        "command": "rm -f /short_video_maker/cleanup_list.json /short_video_maker/sheet_data.json"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -528,
        992
      ],
      "id": "21fe451a-82fc-4efd-85ee-db8f43f3eafd",
      "name": "Cleanup Temp Files"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [
        -1616,
        704
      ],
      "id": "8938fd18-9e25-4a13-a9b7-7c7f04eb6b23",
      "name": "Config2"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "{{ $json.sheet_id }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "POSTING STATUS",
              "lookupValue": "DONE"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        -1408,
        704
      ],
      "id": "f4236576-88dc-4507-885e-4ad304888609",
      "name": "Get Sheet Data1"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1,
      "position": [
        -1184,
        704
      ],
      "id": "6ed16cf7-c398-419f-9328-d6c232a40ffe",
      "name": "To JSON1"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "/short_video_maker/sheet_data.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -960,
        704
      ],
      "id": "93d7f108-46f9-4d62-97c2-c64e25026926",
      "name": "Save Data1"
    },
    {
      "parameters": {
        "command": "=cd /short_video_maker && python3 video_cleanup.py --mode analyze --days {{ $('Config2').item.json.cleanup_days }} --data sheet_data.json --status-col \"{{ $('Config2').item.json.status_col }}\" --posting-status-col \"{{ $('Config2').item.json.posting_status_col }}\" --date-col \"{{ $('Config2').item.json.date_col }}\" --title-col \"{{ $('Config2').item.json.title_col }}\" --video-path-col \"{{ $('Config2').item.json.video_path_col }}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -736,
        704
      ],
      "id": "95232811-2dba-49e3-863e-df5e7ada20c0",
      "name": "Analyze1"
    },
    {
      "parameters": {
        "command": "=cd /short_video_maker && python3 video_cleanup.py --mode execute --approved-files '{{ $json.approved_files }}'"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1184,
        992
      ],
      "id": "788940de-ce7c-440a-93ce-062e96248882",
      "name": "Delete Files1"
    },
    {
      "parameters": {
        "content": "There's your complete workflow! Here's what this does:\n\n## **TWO-STEP PROCESS:**\n\n### **STEP 1: ANALYSIS (Top Workflow)**\n1. **Configurable settings** - Days threshold, column names\n2. **Gets DONE videos** from Google Sheets with filters\n3. **Analyzes candidates** using the Python script\n4. **Shows detailed report** via Telegram\n5. **Saves file list** for execution step\n\n### **STEP 2: EXECUTION (Bottom Workflow)**\n1. **Loads saved file list** from analysis\n2. **Actually deletes** the approved files\n3. **Reports completion** with details\n4. **Cleans up** temporary files\n\n## **SETUP REQUIRED:**\n\n1. **Replace `YOUR_GOOGLE_SHEET_ID`** in the Config node\n2. **Set up credentials:**\n   - Google Sheets credential in \"Get Sheet Data\" \n   - Telegram credentials in \"Send Report\", \"No Files Message\", \"Send Completion\"\n3. **Upload Python script** to `/short_video_maker/video_cleanup.py`\n4. **Adjust column names** in Config node if different from defaults\n\n## **HOW TO USE:**\n\n1. **Run \"Start Analysis\"** - Reviews and reports what would be deleted\n2. **Check Telegram** for detailed report\n3. **If satisfied, run \"Execute Cleanup\"** - Actually deletes the files\n4. **Get completion notification** via Telegram\n\nThe workflow is completely safe - nothing gets deleted until you explicitly run the second trigger after reviewing the analysis report.",
        "height": 880,
        "width": 960
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2912,
        368
      ],
      "id": "9e505d12-86a3-4e99-974e-118d4c51d2e7",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-28T12:43:08.567Z",
      "updatedAt": "2025-09-28T12:43:08.567Z",
      "role": "workflow:owner",
      "workflowId": "n7HzckT6hWYCiYUY",
      "projectId": "aYesZFcPjHzYQyLq"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-28T13:18:40.372Z",
  "versionId": "c9705836-8b18-41cb-972e-d3ad8a024bf7"
}